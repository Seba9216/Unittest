# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test Fractions/UnitTest.sln
    - name: Install codereport
      run: |
        dotnet new xunit -n XUnit.Coverlet.Collector
        dotnet new xunit -n XUnit.Coverlet.MSBuild
        dotnet add XUnit.Coverlet.Collector\XUnit.Coverlet.Collector.csproj reference math\math.csproj
        dotnet add XUnit.Coverlet.MSBuild\XUnit.Coverlet.MSBuild.csproj reference math\math.csproj
        cd XUnit.Coverlet.MSBuild 
        dotnet add package coverlet.msbuild
        cd ..
        dotnet sln XUnit.Coverage.sln add **/*.csproj --in-root
        dotnet build
        cd XUnit.Coverlet.Collector
        dotnet test --collect:"XPlat Code Coverage"
        dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"Path\To\TestProject\TestResults\{guid}\coverage.cobertura.xml" -targetdir:"coveragereport" -reporttypes:Html
        
        
